{
  "_args": [
    [
      {
        "raw": "iltorb@^1.0.13",
        "scope": null,
        "escapedName": "iltorb",
        "name": "iltorb",
        "rawSpec": "^1.0.13",
        "spec": ">=1.0.13 <2.0.0",
        "type": "range"
      },
      "/Users/manik/sites/everproductslider/wp-content/plugins/team-members-for-elementor/node_modules/grunt-contrib-compress"
    ]
  ],
  "_from": "iltorb@>=1.0.13 <2.0.0",
  "_id": "iltorb@1.3.10",
  "_inCache": true,
  "_location": "/iltorb",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/iltorb-1.3.10.tgz_1507601062763_0.24723783880472183"
  },
  "_npmUser": {
    "name": "oohnoitz",
    "email": "oohnoitz@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "iltorb@^1.0.13",
    "scope": null,
    "escapedName": "iltorb",
    "name": "iltorb",
    "rawSpec": "^1.0.13",
    "spec": ">=1.0.13 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/grunt-contrib-compress"
  ],
  "_resolved": "https://registry.npmjs.org/iltorb/-/iltorb-1.3.10.tgz",
  "_shasum": "a0d9e4e7d52bf510741442236cbe0cc4230fc9f8",
  "_shrinkwrap": null,
  "_spec": "iltorb@^1.0.13",
  "_where": "/Users/manik/sites/everproductslider/wp-content/plugins/team-members-for-elementor/node_modules/grunt-contrib-compress",
  "binary": {
    "module_name": "iltorb",
    "module_path": "./build/bindings",
    "remote_path": "v{version}",
    "host": "https://github.com/MayhemYDG/iltorb/releases/download/"
  },
  "bugs": {
    "url": "https://github.com/MayhemYDG/iltorb/issues"
  },
  "contributors": [
    {
      "name": "Nicolas Stepien",
      "email": "stepien.nicolas@gmail.com"
    },
    {
      "name": "Hung Tran",
      "email": "oohnoitz@gmail.com"
    }
  ],
  "dependencies": {
    "detect-libc": "^0.2.0",
    "nan": "^2.6.2",
    "node-gyp": "^3.6.2",
    "prebuild-install": "^2.3.0"
  },
  "description": "Brotli compression/decompression with native bindings",
  "devDependencies": {
    "chai": "^4.1.1",
    "mocha": "^3.5.0",
    "prebuild": "^6.2.2",
    "prebuild-ci": "^2.2.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-nyB4+ru1u8CQqQ6w7YjasboKN3NQTN8GH/V/eEssNRKhW6UbdxdWhB9fJ5EEdjJfezKY0qPrcwLyIcgjL8hHxA==",
    "shasum": "a0d9e4e7d52bf510741442236cbe0cc4230fc9f8",
    "tarball": "https://registry.npmjs.org/iltorb/-/iltorb-1.3.10.tgz"
  },
  "files": [
    "brotli/common",
    "brotli/dec",
    "brotli/enc",
    "brotli/include",
    "src",
    "binding.gyp",
    "index.js"
  ],
  "gitHead": "18192a7d23a30baa201f3ec21fc0b4f696af151d",
  "homepage": "https://github.com/MayhemYDG/iltorb",
  "keywords": [
    "brotli",
    "compression",
    "decompression"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mayhem",
      "email": "stepien.nicolas@gmail.com"
    },
    {
      "name": "oohnoitz",
      "email": "oohnoitz@gmail.com"
    }
  ],
  "name": "iltorb",
  "optionalDependencies": {},
  "readme": "# iltorb\n\n[![NPM Version][npm-badge]][npm-url]\n[![Travis Build Status][travis-badge]][travis-url]\n[![AppVeyor Build Status][appveyor-badge]][appveyor-url]\n\n[iltorb](https://www.npmjs.com/package/iltorb) is a [Node.js](https://nodejs.org) package offering native bindings for the [brotli](https://github.com/google/brotli) compression library.\n\n## Install\n\nThis module uses `prebuild` to download a pre-compiled binary for your platform, if it exists. Otherwise, it will use `node-gyp` to build the module.\n\n```\nnpm install iltorb\n```\n\n### Prerequisites for Building\n\nThe following is required to build from source or when a [pre-compiled binary](https://github.com/MayhemYDG/iltorb/releases) does not exist.\n\n- Python 2.7\n- GCC 4.8+ (Unix) or [windows-build-tools](https://github.com/felixrieseberg/windows-build-tools) (Windows), see [Node Building tools](https://github.com/nodejs/node-gyp#installation).\n\n## Methods\n\n### Async\n\n#### compress(buffer[, brotliEncodeParams], callback)\n\n```javascript\nconst compress = require('iltorb').compress;\n\ncompress(input, function(err, output) {\n  // ...\n});\n```\n\n#### decompress(buffer[, brotliDecodeParams], callback)\n\n```javascript\nconst decompress = require('iltorb').decompress;\n\ndecompress(input, function(err, output) {\n  // ...\n});\n```\n\n### Sync\n\n#### compressSync(buffer[, brotliEncodeParams])\n\n```javascript\nconst compressSync = require('iltorb').compressSync;\n\ntry {\n  var output = compressSync(input);\n} catch(err) {\n  // ...\n}\n```\n\n#### decompressSync(buffer[, brotliDecodeParams])\n\n```javascript\nconst decompressSync = require('iltorb').decompressSync;\n\ntry {\n  var output = decompressSync(input);\n} catch(err) {\n  // ...\n}\n```\n\n### Stream\n\n#### compressStream([brotliEncodeParams])\n\n```javascript\nconst compressStream = require('iltorb').compressStream;\nconst fs = require('fs');\n\nfs.createReadStream('path/to/input')\n  .pipe(compressStream())\n  .pipe(fs.createWriteStream('path/to/output'));\n```\n\n##### compressionStream.flush()\n\nCall this method to flush pending data. Don't call this frivolously, premature flushes negatively impact the effectiveness of the compression algorithm.\n\n#### decompressStream([brotliDecodeParams])\n\n```javascript\nconst decompressStream = require('iltorb').decompressStream;\nconst fs = require('fs');\n\nfs.createReadStream('path/to/input')\n  .pipe(decompressStream())\n  .pipe(fs.createWriteStream('path/to/output'));\n```\n\n### brotliEncodeParams\n\nThe `compress`, `compressSync` and `compressStream` methods may accept an optional `brotliEncodeParams` object to define some or all of brotli's compression parameters:\n- [type definition](https://github.com/google/brotli/blob/v0.6.0/enc/quality.h#L42-L51)\n- [defaults](https://github.com/google/brotli/blob/v0.6.0/enc/encode.c#L676-L683)\n- [explanations](https://github.com/google/brotli/blob/v0.6.0/include/brotli/encode.h#L130-L181)\n\n```javascript\nconst brotliEncodeParams = {\n  mode: 0,\n  quality: 11,\n  lgwin: 22,\n  lgblock: 0,\n  size_hint: 0, // automatically set for `compress` and `compressSync`\n  disable_literal_context_modeling: false,\n  dictionary: Buffer\n};\n```\n\n### brotliDecodeParams\n\nThe `decompress`, `decompressSync` and `decompressStream` methods may accept an optional `brotliDecodeParams` object to provide a custom dictionary.\n\n```javascript\nconst brotliDecodeParams = {\n  dictionary: Buffer\n};\n```\n\n[npm-badge]: https://img.shields.io/npm/v/iltorb.svg\n[npm-url]: https://www.npmjs.com/package/iltorb\n[travis-badge]: https://img.shields.io/travis/MayhemYDG/iltorb.svg\n[travis-url]: https://travis-ci.org/MayhemYDG/iltorb\n[appveyor-badge]: https://ci.appveyor.com/api/projects/status/ysib4o1bfey84lqk/branch/master?svg=true\n[appveyor-url]: https://ci.appveyor.com/project/MayhemYDG/iltorb\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/MayhemYDG/iltorb.git"
  },
  "scripts": {
    "install": "detect-libc prebuild-install || node-gyp rebuild",
    "prebuild-ci": "prebuild-ci",
    "rebuild": "prebuild --compile",
    "test": "mocha"
  },
  "version": "1.3.10"
}
